<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-11-21T08:08:43+00:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Tutorials | HimaliWorld</title><subtitle>Tutorials on Computer Network, Programming, PL's Framework</subtitle><entry><title type="html">Basics of Git</title><link href="http://localhost:4000/Common-Git-Commands/" rel="alternate" type="text/html" title="Basics of Git" /><published>2019-10-30T00:00:00+00:00</published><updated>2019-10-30T00:00:00+00:00</updated><id>http://localhost:4000/Common-Git-Commands</id><content type="html" xml:base="http://localhost:4000/Common-Git-Commands/">&lt;p&gt;Git is a Distributed Version Control System. It has different approach to handling data(versions of software) than most other VCS, which includes ways like, Creating Snapshots,
&lt;!--continue--&gt;
 Local Availability of Operations, use of SHA-1 hash mechanism for higher integrity, using 3 states to track files namely; Modified, Staged and Committed.&lt;/p&gt;

&lt;h3&gt;Git Installattion &amp;amp; Initialization&lt;/h3&gt;
&lt;pre&gt;
 git init   // initializes git repository in desired folder, technically adds .git directory
&lt;/pre&gt;

&lt;h3&gt;Git Branching and Merging&lt;/h3&gt;
&lt;pre&gt;
git branch [branch name]  //creates a branch
git checkout [branch name]  //switches to the branch
git checkout -b [branch name] //creates and switches to the new branch 

git checkout master  //switch to main branch *necessary when merging a branch
git merge [branch name]  //merge the branch to the master
	
git branch -d [branch name]   //deletes the branch

&lt;h5&gt;# Merge conflict occurs if same part of same file is changed in diffrent branches. In such case,
 git pauses the merge( creating unmerged paths) to be resolved and adds conflict-resolution markers 
 to the files that have conflicts; &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; , ========  and  &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; . Sections above and below =======
 represents diffrent versions of same file in different branches. After replacing proper section and
erasing the markers, the file is staged to mark as resolved.&lt;/h5&gt;
git status    // check status of unmerged paths
git mergetool   // fires up default visual merge tool
git add [filename]       // stage the conflcted file to mark as resolved
git status     // to verify everything that had conflicts has been merged
git commit     // finalizes the merge commit
&lt;/pre&gt;</content><author><name></name></author><summary type="html">Git is a Distributed Version Control System. It has different approach to handling data(versions of software) than most other VCS, which includes ways like, Creating Snapshots,</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/git.png" /></entry><entry><title type="html">Common Linux Commands</title><link href="http://localhost:4000/Common-Linux-Commands/" rel="alternate" type="text/html" title="Common Linux Commands" /><published>2019-09-30T00:00:00+00:00</published><updated>2019-09-30T00:00:00+00:00</updated><id>http://localhost:4000/Common-Linux-Commands</id><content type="html" xml:base="http://localhost:4000/Common-Linux-Commands/">&lt;p&gt;Linux Professional Institutes’s LPIC-1 : Linux Server Professional Certification Exams
LPIC-1 : Exam 101 &amp;amp;&amp;amp; Exam 102
&lt;!--continue--&gt;&lt;/p&gt;

&lt;p&gt;Exam 101&lt;/p&gt;
&lt;li&gt;Topic 101 - System Architecture&lt;/li&gt;
&lt;li&gt;Topic 102 - Linux Installation and Package Management&lt;/li&gt;
&lt;li&gt;Topic 103 - GNU and UNIX Commands&lt;/li&gt;
&lt;li&gt;Topic 104 - Devices, Linux filesystems, Filesystem Hierarchy Standard&lt;/li&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Exam 102&lt;/p&gt;
&lt;li&gt;Topic 105: Shells, scripting, and data management&lt;/li&gt;
&lt;li&gt;Topic 106: User interfaces and desktops&lt;/li&gt;
&lt;li&gt;Topic 107: Administrative tasks&lt;/li&gt;
&lt;li&gt;Topic 108: Essential system services&lt;/li&gt;
&lt;li&gt;Topic 109: Networking fundamentals&lt;/li&gt;
&lt;li&gt;Topic 110: Security&lt;/li&gt;</content><author><name></name></author><summary type="html">Linux Professional Institutes’s LPIC-1 : Linux Server Professional Certification Exams LPIC-1 : Exam 101 &amp;amp;&amp;amp; Exam 102</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/linux.png" /></entry><entry><title type="html">Testing Feature of Laravel</title><link href="http://localhost:4000/Testing-Feature/" rel="alternate" type="text/html" title="Testing Feature of Laravel" /><published>2019-07-11T00:00:00+00:00</published><updated>2019-07-11T00:00:00+00:00</updated><id>http://localhost:4000/Testing-Feature</id><content type="html" xml:base="http://localhost:4000/Testing-Feature/">&lt;p&gt;Laravel has integrated to PHPUnit (unit testing), Behat (behavior-driven development), Mockery (mocking), and Faker (creating fake data for seeding and testing).
Testing terms generally has 3 primary terms:&lt;/p&gt;

&lt;!--continue--&gt;
&lt;li&gt;Unit tests&lt;/li&gt;
&lt;li&gt;Integration tests&lt;/li&gt;
&lt;li&gt;Application tests&lt;/li&gt;</content><author><name></name></author><summary type="html">Laravel has integrated to PHPUnit (unit testing), Behat (behavior-driven development), Mockery (mocking), and Faker (creating fake data for seeding and testing). Testing terms generally has 3 primary terms:</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/laravel.png" /></entry><entry><title type="html">Basics of Blockchain</title><link href="http://localhost:4000/Basics-of-BlockChain/" rel="alternate" type="text/html" title="Basics of Blockchain" /><published>2019-06-24T00:00:00+00:00</published><updated>2019-06-24T00:00:00+00:00</updated><id>http://localhost:4000/Basics-of-BlockChain</id><content type="html" xml:base="http://localhost:4000/Basics-of-BlockChain/">&lt;p&gt;Blockchain are generally referred to as digital decentralized ledgers. Blocks are like the pages of notebook where transactions are recorded. 
&lt;!--continue--&gt;
In blockchain notebook, all the pages are linked together. So any attempt to try and change data on any page simply breaks the link which gives Blockchain Immutability.&lt;/p&gt;

&lt;p&gt;Blockchains also provide us with technology called smart contracts, which allowsus to programmatically define rules and steps that should be performed any time a certain type of event is recorded in our blockchain.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;
&lt;h4&gt;Blocks&lt;/h4&gt;
Blocks stores data like pages in notebook stores information.
Same block can hold any data like medical records, voting etc.
Each block is chained to the previious block by embedding the block with information from the previous block. 
Any tampering results into the break of link in obvious way.

&lt;br /&gt;
&lt;br /&gt;
&lt;h4&gt;Blockchain Components&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Ledger: &lt;br /&gt;collection of transactions. In blockchain, the ledger is a distributed immutable record of a collection of transactions.&lt;/li&gt;
&lt;li&gt; Smart Contract: &lt;br /&gt;permanent and immutable collection of code that runs on the blockchain. &lt;br /&gt;
Users can interact with smart contracts in a similar way to the standard computer programs.&lt;/li&gt;
&lt;li&gt; Peer network:&lt;br /&gt;stores, updates and maintains the ledger. Each node in this network maintains its own copy of the ledger and the job of the network is to come to the consensus on the contents of each update to the ledger.
&lt;/li&gt;
&lt;li&gt;Membership Services:&lt;br /&gt; user authentication, authorization and identity management&lt;br /&gt;
Anyone can join the peer network and all network members have equal powersa and authority. Permissioned blockchains require authorization to join.&lt;/li&gt;
&lt;li&gt;Wallet:&lt;br /&gt; collection of user credentials like private keys. It tracks information associated with their account.   &lt;/li&gt;ss
&lt;li&gt;Events:&lt;br /&gt; notifications of actions that are triggered when someone interacts with the chain&lt;/li&gt;
&lt;li&gt;Systems Management:Component creation, modification and monitoring&lt;br /&gt;
It provides the capability of creating, modifying, and monitoring blockchain components.&lt;/li&gt;
&lt;li&gt;Systems Integration: Integration with external systems&lt;br /&gt;
It is included to integrate blockchains with other external systems, usually through the use of smart contracts.&lt;/li&gt;
&lt;/ol&gt;


&lt;h4&gt;Blockchain Actors&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Architect: the person or group who designs and implements the backend code of the Blockchain&lt;/li&gt;
&lt;li&gt;Operator: Operators(nodes) create peer network. They store copies of the ledger and keep their copy up to date by distributing transactions and new blocks througout their network.&lt;/li&gt;
&lt;li&gt;Developer: They design, write and upload smart contracts to the blockchain to expand its capablities.&lt;/li&gt;
&lt;li&gt;Regulator: They have more visibility into the historical ledger due to their role within the orgainiztion.&lt;/li&gt;
&lt;li&gt;End User: They interact with blockchain using software that uses the blockchain as a backend storage solutions.&lt;/li&gt;
&lt;li&gt;Data Storage:&lt;br /&gt;
	Blockchain provides distributed, immutable storage with built-in integrity checking; however, for large amounts of data, data is stored off-chain and a hash of the data is stored on-chain. This prevents bloating of blockchain&amp;lt;

&lt;/li&gt;
&lt;li&gt;Data Processing:&lt;br /&gt;
To execute smart contracts, large amount of processing power can be required. For this reason , devices external to the peer network may be used to augment the processing power of the network.&lt;/li&gt;
&lt;/ol&gt;


&lt;/p&gt;</content><author><name></name></author><summary type="html">Blockchain are generally referred to as digital decentralized ledgers. Blocks are like the pages of notebook where transactions are recorded.</summary></entry><entry><title type="html">SQLite Basics</title><link href="http://localhost:4000/Sqlite-Basics/" rel="alternate" type="text/html" title="SQLite Basics" /><published>2019-05-08T00:00:00+00:00</published><updated>2019-05-08T00:00:00+00:00</updated><id>http://localhost:4000/Sqlite-Basics</id><content type="html" xml:base="http://localhost:4000/Sqlite-Basics/">&lt;p&gt;SQlite is a software library providing Relational Database Management System.
It is: Serverless (Is integrated with application and doesn’t require a server),
&lt;!--continue--&gt;&lt;br /&gt;
&lt;br /&gt;
Self-Contained (Is developed using ANSI-C, and requires minimal support from OS or external library),&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Zero-Configuration (No configuration files are used),&lt;br /&gt;
Transactional (All transactions are ACID-compliant)&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
Other Distinctive features include:&lt;br /&gt;&lt;/p&gt;
&lt;li&gt;Uses dynamic types of tables&lt;/li&gt;
&lt;li&gt;Allows single database connection to access multiple database files simultaneously.&lt;/li&gt;
&lt;li&gt;Creates in-memory databases&lt;/li&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3&gt;SQlite Commands&lt;/h3&gt;
&lt;pre&gt;
  $sqlite3  //start the sqlite3 connection
  $sqlite3 FILENAME   //creates db file during connection if not exists 
  sqlite&amp;gt;.open PATH_TO/FILENAME   //open a database file
  sqlite&amp;gt;.help  //lists all available commands
  sqlite&amp;gt;.database      //shows databases in current connection
  sqlite&amp;gt;attach database &quot;PATH_TO/FILENAME&quot; as FILENAME  //adds additional db to current connection
  sqlite&amp;gt;.tables    //lists all the tables
  sqlite&amp;gt;.table '%ab'   //shows tables with ab string
  sqlite&amp;gt;.schema    //shows structure of all tables
  sqlite&amp;gt;.schema TABLENAME  //shows structure of specified table
  sqlite&amp;gt;.fullschema    
  sqlite&amp;gt;.indexes   //shows all indexes of current database
  sqlite&amp;gt;.indexes TABLENAME
  sqlite&amp;gt;.indexes '%ab'
  sqlite&amp;gt;.output FILENAME   //saves result of subsequent queries into FILENAME
  sqlite&amp;gt;.once FILENAME     //saves result of  next query only
  sqlite&amp;gt;.mode MODENAME     
  sqlite&amp;gt;.read PATH_TO_FILE/FILENAME    //execute query from external FILEclea
  sqlite&amp;gt;.quit     //quits the sqlite3 program
&lt;/pre&gt;

&lt;p&gt;SQLite SELECT statement&lt;/p&gt;
&lt;pre&gt;SELECT DISTINCT column_name FROM table_name
JOIN table ON join_condition
WHERE row_filter
ORDER BY column
LIMIT count 
GROUP BY column
HAVING group_filter;

SELECT column1, column2 FROM table_name;
SELECT * from table_name;
&lt;/pre&gt;</content><author><name></name></author><summary type="html">SQlite is a software library providing Relational Database Management System. It is: Serverless (Is integrated with application and doesn’t require a server),</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/sqlite.png" /></entry><entry><title type="html">Decrypt Wifi Password?</title><link href="http://localhost:4000/How-to-decryt-wifi-password/" rel="alternate" type="text/html" title="Decrypt Wifi Password?" /><published>2019-04-29T00:00:00+00:00</published><updated>2019-04-29T00:00:00+00:00</updated><id>http://localhost:4000/How-to-decryt-wifi-password</id><content type="html" xml:base="http://localhost:4000/How-to-decryt-wifi-password/">&lt;p&gt;There are various algorithms implemented to encrypt passwords. 
It’s not ethical to steal passwords of any kind, without owner’s consent. However
we can setup our own environment to do some ethical practises and there are tools available for the purpose.&lt;br /&gt;&lt;/p&gt;

&lt;!--continue--&gt;

&lt;p&gt;Kali Linux is one the OS preferred for penetration testing. We can use programs in Kali OS to 
experiment with vulnerable wifi passwords in our network.&lt;br /&gt;&lt;/p&gt;

&lt;li&gt; Change MAC address    
  &lt;pre&gt;macchanger  --random wlan0&lt;/pre&gt;
    &lt;p&gt; MAC(Media Access Control) Address is loaded into RAM during boot and this can be changed.&lt;br /&gt;
    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Set Up Monitor Mode to Wireless Interface

&lt;p&gt;Change the defualt 'Managed Mode' of our Wireless Interface to 'Monitor Mode'. This enables
us to collect all the packets from the router.&lt;/p&gt;
&lt;pre&gt;iwconfig wlan0
ifconfig wlan0 down
ifconfig wlan0 mode monitor
ifocnig wlan0 up
iwconfig wlan0&lt;/pre&gt;

&lt;/li&gt;

&lt;li&gt;Catch Enough handshakes
&lt;pre&gt;
#get the required AP,channel, bssid using program airmon-ng on wireless interface
airmon-ng wlan0

#Capture every packets sent by AP on our interface usng program airodump-ng
airodump-ng --channel [channel] --bssid [bssid]  --write [filename] [interface]

#Deauthenticate client or/and wait for client to reconnect to wifi
aireplay-ng --deauth[number of deauth packets] -a [AP] -c[target] [interface]
&lt;/pre&gt;
&lt;/li&gt;

&lt;li&gt;Crack the Key
&lt;pre&gt;#Download the world list file and use aicrack-ng tool to crack the key
aircrack-ng [handshake filename] --w [wordlist] [interface]&lt;/pre&gt;
&lt;/li&gt;

&lt;p&gt; Some common wireless encryptions today are WEP, WPA, WPA2. WPA/WPA2 is considered as secure one. With WPS feautre enabled, it might be easier to crack the wifi. And if not, the only way is the dictionary  attack which involves comparing the dictionay(list of passwords) with handshake file.&lt;/p&gt;</content><author><name></name></author><summary type="html">There are various algorithms implemented to encrypt passwords. It’s not ethical to steal passwords of any kind, without owner’s consent. However we can setup our own environment to do some ethical practises and there are tools available for the purpose.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/wifi.png" /></entry><entry><title type="html">Basics of TCP/IP</title><link href="http://localhost:4000/TCP-and-IP-Basics/" rel="alternate" type="text/html" title="Basics of  TCP/IP" /><published>2019-03-04T00:00:00+00:00</published><updated>2019-03-04T00:00:00+00:00</updated><id>http://localhost:4000/TCP-and-IP-Basics</id><content type="html" xml:base="http://localhost:4000/TCP-and-IP-Basics/">&lt;p&gt;TCP/IP is at the core of computer netwoking as we know today. TCP/IP standards are checked against certain criteria to maintain its integrity and ensure that any dramatic changes are not made and proprietary features are not added. This open apporach makes it most reliable and thus, popular.&lt;br /&gt;
&lt;!--continue--&gt;&lt;/p&gt;
&lt;p&gt;
Open System Interconnection(OSI) Model was developed to logically address the characteristics and standarize the communication functions in telecommunication.
There are 4 logical layers [ Process/Application, Transport, Internet, Link ] in original DoD(Department of Defence) Model which is extended to 7 layers in OSI reference model. 


&lt;table&gt;
&lt;tr&gt;&lt;th&gt;Name of Logical Layers&lt;/th&gt;&lt;th&gt;Protocols Implemented&lt;/th&gt;&lt;th&gt;Functions&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;1.  Application&lt;br /&gt;
2. Presentation&lt;br /&gt;
3.  Session&lt;/td&gt;
&lt;td&gt;Telnet, FTP, TFTP, SNMP,&lt;br /&gt; DHCP, NTP, TSL/SSL, RIP, SSH...&lt;/td&gt;
&lt;td&gt;node to node application communication, controls UI specifications&lt;/td&gt;
&lt;/tr&gt;
 
 &lt;tr&gt;
 &lt;td&gt;4. Transport&lt;/td&gt;
 &lt;td&gt;TCP, UDP, ....&lt;/td&gt;
 &lt;td&gt;creating reliable end-to-end communication,&lt;br /&gt; ensure error-free delivery of data,&lt;br /&gt;maintains data integrity, handles packet sequencing&lt;/td&gt;
 &lt;/tr&gt;

 &lt;tr&gt;
 &lt;td&gt;5. Network&lt;/td&gt;
 &lt;td&gt;IP, ICMP, ARP, RARP, ....&lt;/td&gt;
 &lt;td&gt;handles addressing of hosts using IP address and  routing of packets among multiple networks&lt;/td&gt;
 &lt;/tr&gt;
 &lt;tr&gt;
 &lt;td&gt;6.  Data Link&lt;br /&gt;
 7. Physical &lt;/td&gt;
 &lt;td&gt;ARP,NDP, OSPF, L2TP, PPP, MAC, ....&lt;br /&gt;
 Ethernet, FDDI, ...&lt;/td&gt;
 &lt;td&gt;oversees hardware addressing and &lt;br /&gt;defines protocols for the physical transmission of data&lt;/td&gt;
 &lt;/tr&gt;
 &lt;/table&gt;
&lt;/p&gt;
&lt;h3&gt;IP addressing &lt;/h3&gt;
&lt;p&gt;IP address is software address designed to facilitate communication between hosts in different networks. &lt;br /&gt;
 Hardware address is hard-coded into NIC card and used for finding hosts on a local network.
 &lt;br /&gt;&lt;br /&gt;
  An IP address contains 32 bits divided into 4 sections; 1 byte in each section. It can be represented in Dotted decimal, Binary or Hexadecimal. &lt;br /&gt;
 With 32 bits, approximately 4.3 billions (2^32) of unique IP addresses can be formed. 
 &lt;br /&gt;
 To address every unique IP address, all routers would need to store address of each and every machine on the internet. This would make efficient routing impossible even if only a fraction of the possible addresses were to be used.&lt;br /&gt;
 Thus the solution lies on 2 or 3 level of hierarchical addressing scheme; network and host, or network, subnet, and host. 
 

 &lt;h5&gt;Network Addressing&lt;/h5&gt;
 Network address or network number, uniquely identifies each network. Each machine on same network shares same network address.&lt;br /&gt;
 Node address uniquely identifies a particular machine on a network, as opposed to the network address, which is a group.&lt;br /&gt; &lt;br /&gt;
 Based on the network size, classes are created.&lt;br /&gt;&lt;br /&gt;
 
&lt;table&gt;
&lt;th&gt;Class &lt;/th&gt;&lt;th&gt;Fist bits &lt;/th&gt;&lt;th&gt;Network Address Range&lt;/th&gt;&lt;th&gt;Total Usuable Network Adress&lt;/th&gt;&lt;th&gt;Total Unique Hosts per Network&lt;/th&gt;
&lt;tr&gt;&lt;td&gt;Class A &lt;/td&gt;&lt;td&gt; 0 &lt;/td&gt;&lt;td&gt; 0 - 127 &lt;/td&gt;&lt;td&gt;2^(7) - 2 = 126&lt;/td&gt;&lt;td&gt;2^(24) - 2 = 16,777,214&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Class B &lt;/td&gt;&lt;td&gt; 10 &lt;/td&gt;&lt;td&gt; 128 - 191 &lt;/td&gt;&lt;td&gt;2^(14) - 2 = 16384&lt;/td&gt;&lt;td&gt;2^(16) - 2 = 65534&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Class C &lt;/td&gt;&lt;td&gt; 110 &lt;/td&gt;&lt;td&gt; 192 - 223 &lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;2^(8) - 2 = 254&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Class D &lt;/td&gt;&lt;td&gt; 1110 &lt;/td&gt;&lt;td&gt; 224 - 239&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Class E &lt;/td&gt;&lt;td&gt; 11110 &lt;/td&gt;&lt;td&gt; 240 - 255 &lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;h5&gt;Reserved Private IP address&lt;/h5&gt;
&lt;table&gt;
&lt;tr&gt;&lt;th&gt;Address Class&lt;/th&gt;&lt;th&gt;Reserved address space&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Class A&lt;/td&gt;&lt;td&gt;10.0.0.0 ~ 10.255.255.255&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Class B&lt;/td&gt;&lt;td&gt;172.16.0.0 ~ 172.31.255.255&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Class C&lt;/td&gt;&lt;td&gt;192.168.0.0 ~ 192.168.255.255&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;


&lt;/p&gt;</content><author><name></name></author><summary type="html">TCP/IP is at the core of computer netwoking as we know today. TCP/IP standards are checked against certain criteria to maintain its integrity and ensure that any dramatic changes are not made and proprietary features are not added. This open apporach makes it most reliable and thus, popular.</summary></entry><entry><title type="html">Know About Router and Switch</title><link href="http://localhost:4000/Know-about-router-and-switch/" rel="alternate" type="text/html" title="Know About Router and Switch" /><published>2019-01-01T00:00:00+00:00</published><updated>2019-01-01T00:00:00+00:00</updated><id>http://localhost:4000/Know-about-router-and-switch</id><content type="html" xml:base="http://localhost:4000/Know-about-router-and-switch/">&lt;p&gt;A small local area Computer Network comprises of two or more different electronic devices(nodes) that are able to communicate with each other for the transimission of data or infromation, to and  from each other.&lt;/p&gt;

&lt;!--continue--&gt;
&lt;p&gt;There are devices like router and switch, that has its own operating system and protocols embedded into it, whose primary function is to facilitate the communication between the nodes in the network.&lt;/p&gt;

&lt;h3&gt;Router&lt;hr /&gt;&lt;/h3&gt;
&lt;p&gt;Router is a Layer 3(Network Layer) networking device which uses logical addressing(IPv4 or IPv6),connects two or more networks to form internetwork and provides capacities like packet switching, packet filtering using access lists, path selection.&lt;br /&gt;
Router don’t forward broadcasts by default and they filter the network based on layer 3 information like IP address. &lt;br /&gt;
Routers provide a separate broadcast domain for each interface.&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;To configure &lt;i&gt;CISCO&lt;/i&gt; router using CLI, lets know about the user modes in the router settings:&lt;/h4&gt;
&lt;table&gt;
&lt;tr&gt;&lt;td&gt;&lt;b&gt;Modes Name&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;Prompt Used&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;Description&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;User Mode&lt;/td&gt;&lt;td&gt;&amp;gt;&lt;/td&gt;&lt;td&gt;only simple commands like ping can be executed&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Privilege Mode&lt;/td&gt;&lt;td&gt;#&lt;/td&gt;&lt;td&gt;router settings can be accessed, administrative mode&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Global Configuration Mode&lt;/td&gt;&lt;td&gt;(config)#&lt;/td&gt;&lt;td&gt;settings for router like hostname,password.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Interface Configuration Mode&lt;/td&gt;&lt;td&gt;(config-if)#&lt;/td&gt;&lt;td&gt;settings for router's interfaces like IP address&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Router Configuration Mode&lt;/td&gt;&lt;td&gt;(config-router)#&lt;/td&gt;&lt;td&gt;settings for routing protocols&lt;/td&gt;&lt;/tr&gt; 
&lt;/table&gt;

&lt;h4&gt;Common Router Settings&lt;/h4&gt;
&lt;pre&gt;Router&amp;gt;enable    //user mode to privilege mode; 
Router#disable  //privilege mode to user mode
Router#exit     //exits the router to after-boot state
&lt;/pre&gt;
&lt;h4&gt;Privilege Mode Commands&lt;/h4&gt;
&lt;pre&gt;#?      //shows exec commands that can be executed
#show ?     //show the available commands to be used after show, some are
#show flash    //informaion like IOS size and name, memory used, flash memory size
#show interfaces     //information on interfaces and its state
#show interface fastethernet 0/0     //show infromation on fastethernet 0/0
#show ip interface       //checks the implementation of TCP/IP on interface
#show ip interface fastethernet 0/0 
#show version   //shows information like IOS version , DRAM size, NVRAM size etc.
#show protocols   //informs about protocols used and their status in interfaces
#show running-config  //shows the configuration hold by volatile RAM

#copy running-config startup-config  //saves the settings to non-volatile NVRAM,
#configure terminal      //privilege mode --&amp;gt; Global Configuration Mode 
&lt;/pre&gt;
&lt;h4&gt;Global Configuration Mode&lt;/h4&gt;
&lt;pre&gt;Router(config)#hostname R1     //changes hostname to R1
R1(config)#enable password  abc     //unencrypted password; abc for gaining access to privilege mode
R1(config)#enable secret abc        //encrypted password; abc for access to privelege mode from user mode
R1(config)#no ip domain-lookup    //to disable DNS function that is enabled by default
R1(config)#service password-encryption      //encrypts all the password 

R1(config)#line vty 0 4     //to configure settings for telnet connection for 0 to 4 ports
        R1(config-line)#login
        R1(config-line)#password abc    
        R1(config-line)#exit

R1(config)#line console 0  //to configure settings for console connection
       R1(config-line)#login
       R1(config-line)#password cisco
       R1(config-line)#exec-timeout 0 0   //disables timeout for console connection
       R1(config-line)#exit
&lt;/pre&gt;

&lt;h4&gt;Interface Configuration Mode&lt;/h4&gt;
&lt;pre&gt;
R1(config)#interface fastethernet 0/0   //configures interface fastethernet
R1(config-if)#ip address 172.16.1.200   255.255.255.0
R1(config-if)#no shutdown
 &lt;/pre&gt;

&lt;h4&gt;Few Terminologies&lt;/h4&gt;
&lt;table&gt;
 &lt;tr&gt;&lt;td&gt;interface is up &lt;/td&gt;&lt;td&gt;interface can function as physical layer&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;interface is down &lt;/td&gt; &lt;td&gt; interface  can't function as physical layer&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;administratively down&lt;/td&gt;&lt;td&gt;interface is in &quot;shutdown&quot; state&lt;/td&gt;&lt;/tr&gt;
 &lt;tr&gt;&lt;td&gt;Maximum Transmission Unit  (MTU)&lt;/td&gt;&lt;td&gt;Amount of IP datagram a device can send at one time.  &lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;BandWidth(BW)&lt;/td&gt;&lt;td&gt;Unit: kbps&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;Delay(DLY)&lt;/td&gt;&lt;td&gt;Unit: usec (microsec)&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;relaibility&lt;/td&gt;&lt;td&gt;reliability of interface. [255/255] shows highest reliabilty while [0/255] is the lowest.&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;tcload,rxload&lt;/td&gt;&lt;td&gt;state of transmission capacity, receiving capacity of interfaces&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;encapsulation&lt;/td&gt;&lt;td&gt;capsulating data link layer of interface, for example LAN interface has 4 types: EthernetII(ARPA) or (HDLC for serial interfaces), SNAP, 802.3Raw(novel-ether),802.2LLC(sap)&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;Switch&lt;hr /&gt;&lt;/h3&gt;
&lt;p&gt;Switch is a layer 2 (data link layer) networking device. It basically functions as a bridge which is more software oriented while, switch contains ASIC(Application Specific Integrated Circuit) hardware with high performance. Also switch has high port density(number of ports per device) allowing ease of control of network traffic.&lt;br /&gt;&lt;br /&gt;
Switch basically performs 2 functions:&lt;/p&gt;
&lt;li&gt;&lt;b&gt;Forwarding&lt;/b&gt; : When frames arrives in a receiving port, it copies and forwards frames to the available ports except the receiving port.&lt;/li&gt;
&lt;li&gt;&lt;b&gt;Filtering&lt;/b&gt; : Discards frames as per the rule specified&lt;/li&gt;
&lt;p&gt;&lt;br /&gt;
Frame is data unit formed by adding ethernet header to the packet provided by IP layer.&lt;br /&gt;
Forwarding happens in following steps:&lt;br /&gt;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Copy receiving port and destination MAC address from receiving frame.&lt;/li&gt;
	&lt;li&gt;Send frame from port related to destination MAC address in received frame.&lt;/li&gt;
	&lt;li&gt;If the receiving port is the port related to destination MAC address in received frame, discard the frame&lt;/li&gt;
	&lt;li&gt;If the receiving port is not the port of destination MAC address, send frames to all the ports except the receiving one(flooding).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;br /&gt;
&lt;b&gt;Collision Domain&lt;/b&gt;: It is an ethernet term used for network segment in which all the devices response to the packet out in the segment, usually leading to collisions.
&lt;br /&gt; 
Each port on Switch creates separate collision domains on a single broadcast domain.&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Broadcast Domain&lt;/b&gt;:&lt;/p&gt;</content><author><name></name></author><summary type="html">A small local area Computer Network comprises of two or more different electronic devices(nodes) that are able to communicate with each other for the transimission of data or infromation, to and from each other.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/com_net.png" /></entry><entry><title type="html">Laravel’s Authentication System</title><link href="http://localhost:4000/User-Authentication-Using-Laravel/" rel="alternate" type="text/html" title="Laravel's Authentication System" /><published>2018-12-18T00:00:00+00:00</published><updated>2018-12-18T00:00:00+00:00</updated><id>http://localhost:4000/User-Authentication-Using-Laravel</id><content type="html" xml:base="http://localhost:4000/User-Authentication-Using-Laravel/">&lt;h4&gt;User Authentication System basically includes: registration, login, sessions, password resets, and access permissions.&lt;/h4&gt;
&lt;!--continue--&gt;

&lt;h5&gt; Every install of Laravel comes with:a RegisterController, a LoginController, a ForgotPasswordController, and a ResetPasswordController &lt;/h5&gt;
&lt;pre&gt;php artisan make:auth //This auth scaffold seeds 
authentication-related views and routes
 //following files are created
  app/Http/Controllers/HomeController.php
  resources/views/auth/login.blade.php 
  resources/views/auth/register.blade.php
  resources/views/auth/passwords/email.blade.php
  resources/views/auth/passwords/reset.blade.php
  resources/views/layouts/app.blade.php
  resources/views/home.blade.php

php artisan migrate //to run migrations that are by default
&lt;/pre&gt;

&lt;h4&gt;User Model and Migration&lt;/h4&gt;
&lt;p&gt;Laravel fresh installation contains app/user model and, create_users_table and create_password_resets_table , migrations&lt;/p&gt;
&lt;pre&gt;
//default user migration contains
 Schema::create('users', function (Blueprint $table) {
            $table-&amp;gt;increments('id');
            $table-&amp;gt;string('name');
            $table-&amp;gt;string('email')-&amp;gt;unique();
            $table-&amp;gt;timestamp('email_verified_at')-&amp;gt;nullable();
            $table-&amp;gt;string('password');
            $table-&amp;gt;rememberToken();
            $table-&amp;gt;timestamps();
//default password reset migration contains
Schema::create('password_resets', function (Blueprint $table) {
            $table-&amp;gt;string('email')-&amp;gt;index();
            $table-&amp;gt;string('token');
            $table-&amp;gt;timestamp('created_at')-&amp;gt;nullable();
        });
&lt;/pre&gt;
&lt;pre&gt;
/*defalut user model app/User.php which extends
Illuminate\Foundation\Auth\User class*/

use Illuminate\Notifications\Notifiable;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Foundation\Auth\User as Authenticatable;

class User extends Authenticatable
{
    use Notifiable;
    protected $fillable = [
        'name', 'email', 'password',
    ];
    protected $hidden = [
        'password', 'remember_token',
    ];
  }

//Illuminate\Foundation\Auth\User look like
namespace Illuminate\Foundation\Auth;

use Illuminate\Auth\Authenticatable;
use Illuminate\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Auth\Passwords\CanResetPassword;
use Illuminate\Foundation\Auth\Access\Authorizable;
use Illuminate\Contracts\Auth\Authenticatable as 
AuthenticatableContract;
use Illuminate\Contracts\Auth\Access\Authorizable as 
AuthorizableContract;
use Illuminate\Contracts\Auth\CanResetPassword as 
CanResetPasswordContract;

class User extends Model implements
    AuthenticatableContract,
    AuthorizableContract,
    CanResetPasswordContract
{
    use Authenticatable, Authorizable, CanResetPassword, 
MustVerifyEmail;
}
&lt;/pre&gt;
&lt;h5&gt; Authenticatable Contracts requires methods like 
getAuthIdentifier()&lt;br /&gt;
Authorizable Contract requires methods like can()&lt;br /&gt;
CanResetPassword Contract requires method 
getEmailForPasswordReset()&lt;/h5&gt;

&lt;p&gt;Using auth() global helper and the auth Facade&lt;br /&gt;&lt;/p&gt;
&lt;pre&gt;
public function dashboard(){
	if(auth()-&amp;gt;guest()){ return redirect('sign-up'); }
        return view('dashboard')-&amp;gt;with('user',auth()-&amp;gt;user());
}
//other ways to check user is: auth()-&amp;gt;check(), auth()-&amp;gt;user(), 
//auth()-&amp;gt;id() return false or null when user is not logged in
&lt;/pre&gt;
&lt;p&gt;The Auth Controllers&lt;/p&gt;
&lt;pre&gt;//RegisterController //
  --&amp;gt;$redirectTo property //where to redirect user after registration
  --&amp;gt;validator() method //how to validate registrations
  --&amp;gt;create() method //how to create a new user
  --&amp;gt;RegisterUsers trait 
	-&amp;gt;shows user form with showRegistrationForm() mehtod
        -&amp;gt;handles POST of the form with register() method which passes
           the input to validator()method, and then on to the create() method.

//LoginController//
--&amp;gt;AuthentiateUsers trait
   -&amp;gt;shows user login form, validating their logins, throttling failed 
login, handling logouts, and redirecting users after a successful login
  -&amp;gt;showLoginForm() method, login(), validateLogin(), authenticated(), 
username() methods are used
--&amp;gt;ThrottlesLogins trait
   -&amp;gt;an interface to Laravel's Illuminate\Cache\RateLimiter class

//ResetPasswordController//
--&amp;gt;ResetsPasswords trait
	-&amp;gt;showResetForm(),reset(), resetPassword(),broker(),guard()

//ForgotPasswordController
--&amp;gt;SendsPasswordResetEmails trait
   -&amp;gt;shows auth.passwords.email form with showLinkRequestForm() method
   -&amp;gt;handles the POST with sendResetLinkEmail() method
&lt;/pre&gt;

&lt;p&gt;Auth::routes()&lt;/p&gt;
&lt;pre&gt;//   routes/web.php
	Auth::routes(); //brings in a bundle of predefined routes
&lt;/pre&gt;

&lt;p&gt;Remember Me&lt;/p&gt;
&lt;pre&gt;//The users table in the default migration has a remember_token 
column
//without remember me implementation
if(auth()-&amp;gt;attempt([
	'email'=&amp;gt;request()-&amp;gt;input('email'),
	'password'=&amp;gt;request()-&amp;gt;input('password')
	])){
	//successfull login
}

//with remember me checkbox
if(auth()-&amp;gt;attempt([
	'email'=&amp;gt;request()-&amp;gt;input('email'),
	'password'=&amp;gt;request()-&amp;gt;input('password')
	]),request()-&amp;gt;has('remember')){
	//the successful login handler
}

//method auth()-&amp;gt;viaRemember() can be used to check if a remember token 
was used.
&lt;/pre&gt;

&lt;p&gt;Manual Authentication&lt;/p&gt;
&lt;pre&gt;
#auth()-&amp;gt;attempt() is used to check the credentials from the user.
#However, in cases like switching users by admin,following methods are used:
#1.passing user ID
auth()-&amp;gt;loginUsingId(5);
#2.passing user or other objects that implements Authenticatable contract
auth()-&amp;gt;login($user);
&lt;/pre&gt;

&lt;p&gt;Auth Middleware&lt;/p&gt;
&lt;pre&gt;#Route middleware are used to restrict certain routes to guests or to authenticated users.
#Route Middleware is defined in app\Http\Kernel as following:
protected $routeMiddleware = [
        'auth' =&amp;gt; \Http\Middleware\Authenticate::class,
        'auth.basic' =&amp;gt; \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,
        'bindings' =&amp;gt; \Illuminate\Routing\Middleware\SubstituteBindings::class,
        'cache.headers' =&amp;gt; \Illuminate\Http\Middleware\SetCacheHeaders::class,
        'can' =&amp;gt; \Illuminate\Auth\Middleware\Authorize::class,
        'guest' =&amp;gt; \Vidhyalaya\Http\Middleware\RedirectIfAuthenticated::class,
        'signed' =&amp;gt; \Illuminate\Routing\Middleware\ValidateSignature::class,
        'throttle' =&amp;gt; \Illuminate\Routing\Middleware\ThrottleRequests::class,
        'verified' =&amp;gt; \Illuminate\Auth\Middleware\EnsureEmailIsVerified::class,
    ];
#example of routes protected by auth middleware
Route::group(['middleware' =&amp;gt; 'auth'], function () {
	Route::get('account', 'AccountController@dashboard');
});
Route::get('login','Auth\LoginController@getLogin')-&amp;gt;middleware('guest');
&lt;/pre&gt;

&lt;p&gt;Understanding Guards&lt;/p&gt;
&lt;pre&gt;# Authentication system is routed through guard, which is 
combination of, a driver that defines how it persists and retrieves the 
auth state like session, and a provider that allows to get a certain 
area like users.
#Laravel has two guards: web and api
#web is basic auth. sytle, uses session driver and the basic user 
provider
#api uses the same basic user provider but the token driver
&lt;/pre&gt;

&lt;p&gt;Changing the Default Guard&lt;/p&gt;
&lt;pre&gt;#guards are defined in config/auth.php
#default guard is used any time auth featueres are used.
#to change the default guard change auth.defaults.guard in 
config/auth.php to 
'defaults' =&amp;gt; [
	'guard' =&amp;gt; 'web', // Change the default here
	'passwords' =&amp;gt; 'users',
],
&lt;/pre&gt;

&lt;p&gt;Using Other guards without changing the default&lt;/p&gt;
&lt;pre&gt;#start auth calls with guard():
$apiUser = auth()-&amp;gt;guard('api')-&amp;gt;user();
&lt;/pre&gt;

&lt;p&gt;Adding a new Guard&lt;/p&gt;
&lt;pre&gt;#add a new guard auth.guard settings in config/auth.php
 'guards'=&amp;gt;[
	'students'=&amp;gt;[
		'registered' =&amp;gt; 'session',
		'provider' =&amp;gt; 'students',
	],
  ],
#in an app where  users are students, they have their own users, 
students who can log in to their subdomains.So a separate guard.
&lt;/pre&gt;

&lt;p&gt;Creating a Custom User Provider&lt;/p&gt;
&lt;pre&gt;#auth.providers section in config/auth.php defines availabe 
providers.
#creating a new provider look like:
'providers' =&amp;gt; [
	'users' =&amp;gt; [
	'driver' =&amp;gt; 'eloquent',
	'model' =&amp;gt; App\User::class,
        ],
 'students' =&amp;gt; [
	'driver' =&amp;gt; 'eloquent',
	'model' =&amp;gt; App\Students::class,
	],
 ],
#in the app, there are users and students, &amp;amp; theny need to be 
authenticated separately as
#auth()-&amp;gt;guard(users) and auth()-&amp;gt;guard(students)
#auth route middleware can take a guard name as a parameter as:
Route::group(['middleware'=&amp;gt;'auth:students'],function(){
	//students only route here
});
&lt;/pre&gt;

&lt;p&gt;Custom User Provider for non-relational Databases&lt;/p&gt;
&lt;pre&gt;# a new class needs to be created that implements 
Illuminate\Contracts\Auth\UserProvider interface
#bind it in AuthServiceProvider@boot
auth()-&amp;gt;provider('mongo',function($app, array $config){
     //return an instance of UserProvider
	return new MongoUserProvider($app['mongo.connection']);
});
&lt;/pre&gt;

&lt;p&gt;Auth Events&lt;/p&gt;
&lt;pre&gt;#Laravel's event system has: system and user generated events.
#auth. events generated by framework look like:
protected $listen = [
	'Illuminate\Auth\Events\Attempting' =&amp;gt; [],
	'Illuminate\Auth\Events\Login' =&amp;gt; [],
	'Illuminate\Auth\Events\Logout' =&amp;gt; [],
	'Illuminate\Auth\Events\Lockout' =&amp;gt; [],
];
#listeners for &quot;user attempting login&quot;, &quot;successful 
login&quot;,&quot;logout&quot;,&quot;lockout&quot;
&lt;/pre&gt;</content><author><name></name></author><summary type="html">User Authentication System basically includes: registration, login, sessions, password resets, and access permissions.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/login.png" /></entry><entry><title type="html">Linux File Permissions</title><link href="http://localhost:4000/Linux-File-Permissions/" rel="alternate" type="text/html" title="Linux File Permissions" /><published>2018-12-16T00:00:00+00:00</published><updated>2018-12-16T00:00:00+00:00</updated><id>http://localhost:4000/Linux-File-Permissions</id><content type="html" xml:base="http://localhost:4000/Linux-File-Permissions/">&lt;h4&gt;&quot;Everything is a file&quot;, which is one of the definitive features of  UNIX Operating System and its derivatives like Linux.&lt;/h4&gt;

&lt;!--continue--&gt;

&lt;h5&gt;Permission Groups&lt;/h5&gt;
&lt;pre&gt;owner(u), group(g), others(o), all users(a)&lt;/pre&gt;

&lt;h5&gt;Permission Types&lt;/h5&gt;
&lt;pre&gt;read(r), write(w), execute(x)&lt;/pre&gt;

&lt;h5&gt;Command line format example&lt;/h5&gt;
&lt;pre&gt; _rwxrwxrwx1owner:group
-&amp;gt; first character _ is special permission flag which can vary
-&amp;gt; following set of 3 characters(rwx) is for owner permissions 
-&amp;gt; following second set of 3 characters(rwx)is for group permissions.
-&amp;gt; third set of 3 characters(rwx)is for all users permissions
-&amp;gt; following integer/number displays the number of hard links to the file.
-&amp;gt; the last part is the owner and group assignment as Owner:Group
&lt;/pre&gt;
&lt;h5&gt;Modifying permissions using &lt;b&gt;chmod&lt;/b&gt;&lt;pre&gt;chmod a+rw filename 
//adds read and write permissions from the all users group.
&lt;/pre&gt;

&lt;h5&gt;Using Binary Refrences&lt;/h5&gt;&lt;pre&gt; r=4, w=2, x=1
chmod 640 filename //owner has read and write permissions, the group has read permissions,
and all other users have no rights to the file.&lt;/pre&gt;


&lt;h5&gt;Owners and Groups&lt;/h5&gt;&lt;pre&gt;chown owner:group filename 
example: chown user1:kali filename
//changes the owner of filename to user1 and the group to kali&lt;/pre&gt;

&lt;h5&gt; Advanced Permissions&lt;/h5&gt;
Special permission flag can be marked with following:
&lt;pre&gt; _ -&amp;gt; no special permission
d -&amp;gt;directory
l -&amp;gt;file or directory is a symbolic link
s -&amp;gt; setuid/setgid permissions, represented in the read portion of the owner or group permissions. 
t -&amp;gt; sticky bit sermissions, represented in the executable portion of the all users permissions.  
&lt;/pre&gt;



&lt;/h5&gt;</content><author><name></name></author><summary type="html">&quot;Everything is a file&quot;, which is one of the definitive features of UNIX Operating System and its derivatives like Linux.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/linux.png" /></entry></feed>